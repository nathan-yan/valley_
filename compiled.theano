
import theano
import numpy
import load
import theano.tensor as T
from theano.sandbox.rng_mrg import MRG_RandomStreams as RandomStreams
import numpy as np
from theano.tensor.nnet.conv import conv2d
from theano.tensor.signal.downsample import max_pool_2d
srng = RandomStreams()
def init_weights(shape):
    return theano.shared(np.random.randn(*shape) * 0.01)
params = []
inp1 = T.tensor4()
target2 = T.matrix()
flat6= T.flatten(inp1, outdim = 2)
param5= init_weights((784, 10))
params.append(param5)
dot4= T.dot(flat6, param5)
sigmoid8=T.nnet.sigmoid(dot4)

loss7=T.mean(T.sum((target2 - sigmoid8) ** 2, axis = 1))
grad0=T.grad(cost = loss7, wrt = param5)
updates = []
for p, g in zip(params, [grad0]):
    updates.append([p, p - g * 0.005])
train = theano.function(inputs = [inp1,target2], outputs = [loss7, T.argmax(sigmoid8, axis = 1)], updates = updates)
mnist = load.MNIST()
X, y = mnist.load_training()

raw_input("everything loaded, press enter")

for epoch in range (100):
    for batch in range (0, X.shape[0], 50):
        loss7, results9 = train(X[batch:batch+1000], y[batch:batch+1000])
        if batch % 5000 == 0:
            print loss7, np.mean(results9 == np.argmax(y[batch:batch+1000], axis = 1))
            